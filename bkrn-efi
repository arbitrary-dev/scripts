#!/bin/sh

TMPDIR="${TMPDIR:-/tmp}"
BPATH="$TMPDIR/bkrn"
KPATH="/usr/src/linux"
LOG="$BPATH/bkrn.log"

modules_prepare() {
  mkdir -p "$BPATH"
	if [ ! -f "$BPATH/.config" ]; then
		if [ -f "$KPATH/.config" ]; then
			sudo mv -v "$KPATH/.config" "$BPATH"
		else
			echo "There is no kernel .config in neither $BPATH nor $KPATH !"
			exit 1
		fi
	fi
	sudo sh -c '
    make -C "'$KPATH'" mrproper
    PATH="/usr/lib/ccache/bin:${PATH}" \
    CCACHE_DIR="/var/cache/ccache" \
    make -C '$KPATH' O='$BPATH' modules_prepare
    cp -v "'$BPATH'/.config" "'$KPATH'/.config"
  '
}

build() {
  mkdir -p "$BPATH"
	if [ ! -f "$BPATH/.config" ]; then
		if [ -f "$KPATH/.config" ]; then
			sudo mv -v "$KPATH/.config" "$BPATH"
		else
			echo "There is no kernel .config in neither $BPATH nor $KPATH !"
			exit 1
		fi
	fi

  KNAME=`ls -ld /usr/src/linux | awk '{print $NF}'`

  echo
  printf "Cleaning up $KNAME... "
	sudo make -C "$KPATH" mrproper &>"$LOG" && echo "done" || echo "FAILED"
  echo

  THREADS=`sed -nE 's/siblings\s+: ([0-9]+)/\1/p' /proc/cpuinfo | head -1`
  THREADS=$(($THREADS + 1))

  sudo sh -c '
    make -C "'$KPATH'" O="'$BPATH'" oldconfig
    echo

    echo "Logs: '$LOG'"
    printf "Compiling '$KNAME' using '$THREADS' threads... "
    PATH="/usr/lib/ccache/bin:${PATH}" \
    CCACHE_DIR="/var/cache/ccache" \
    make -C "'$KPATH'" O="'$BPATH'" -j'$THREADS' &>>"'$LOG'"
    if (( ! $? )); then
      echo "done"
      emerge --ask --quiet-build @module-rebuild

      echo
      printf "Installing modules... "
      make -C "'$KPATH'" O="'$BPATH'" modules_install &>>"'$LOG'" \
      && echo "done" \
      || echo "FAILED"
    else
      echo "FAILED"
    fi
    cp -v "'$BPATH'/.config" "'$KPATH'/.config"
  '
}

initramfs() {
  # Configured by /etc/genkernel.conf
  sudo genkernel initramfs
}

install() {
  if [ ! -d "$BPATH" ]; then
    echo "No $BPATH available!"
    return 1
  fi

	sudo mount /boot

  echo "Installing kernel... "
  if sudo make -C "$KPATH" O="$BPATH" install &>>"$LOG"; then
    K=`ls -t /boot/vmlinuz* | head -1`
    sudo cp -v "$K" /boot/EFI/boot/bootx64.efi

    # TODO install kernel as vmlinuz-<version>
    echo
    make -C "$KPATH" O="$BPATH" kernelrelease
    echo "???"
	fi

  echo "Installing initramfs... "
  I=`ls -t /boot/initramfs* | head -1`
  sudo cp -v "$I" /boot/EFI/initramfs.img
}

restore() {
	mount /mnt/efi
	cp $BKPATH/bootx64.efi /mnt/efi/efi/boot
	cp $BKPATH/initramfs.img /mnt/efi/efi/boot
	if [ $? -eq 0 ]; then
		echo "EFI restored!"
	fi
}

add_tmp_efi_entry() {
  efibootmgr -v
  echo

  read -n1 -p "Add entry for Gentoo_tmp? " ans; echo
  [ "$ans" != y ] && return

  root_uuid=`lsblk -o PARTLABEL,PARTUUID | grep root | awk '{print $2}'`
  sudo efibootmgr -d /dev/nvme0n1 -p 1 -v -c -L Gentoo_tmp -l '\EFI\boot\bootx64.efi' -u "initrd=\EFI\initramfs.img crypt_root=PARTUUID=$root_uuid dolvm real_root=/dev/vg0/root resume=/dev/nvme0n1p3 modprobe.blacklist=pcspkr i8042.noloop i8042.nomux i8042.nopnp i8042.reset"
}

if (( ! $# )); then
  target=`eselect kernel show | grep -oE '[0-9.]+'`
  current=`uname -r | grep -oE '[0-9.]+'`

  read -n1 -p "Build kernel $target (current: $current)? "; echo
  while true; do
    if [ "$REPLY" == "y" ]; then
      build || exit 1
      break
    elif [ "$REPLY" == "n" ]; then
      break
    else
      read -n1 -p "What? "; echo
    fi
  done

  echo
  read -n1 -p "Compile initramfs for kernel $target? "; echo
  while true; do
    if [ "$REPLY" == "y" ]; then
      initramfs || exit 1
      break
    elif [ "$REPLY" == "n" ]; then
      break
    else
      read -n1 -p "What? "; echo
    fi
  done

  echo
  read -n1 -p "Install kernel $target? "; echo
  while true; do
    if [ "$REPLY" == "y" ]; then
      install || exit 1
      break
    elif [ "$REPLY" == "n" ]; then
      break
    else
      read -n1 -p "What? "; echo
    fi
  done
else
	$1
fi
