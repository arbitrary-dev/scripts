#!/bin/bash

ERR=${0##*/}-err.log

shopt -s expand_aliases
alias _parallel="parallel --halt soon,fail=1 --will-cite --colsep=' '"

_mimetype() {
  file --mime-type "$1" | sed -E "s/.+ //"
  # TODO check `sed -r|E` availability
}

_size_bytes() {
  local res
  res=`stat -c %s $1 2>/dev/null`
  if (( $? )); then
    # MacOS
    res=`stat -f %z $1 2>/dev/null`
  fi
  echo $res
}
export -f _size_bytes

_log() {
  printf "$*\n"
}

_usage() {
  local func=${FUNCNAME[1]}
  [[ $func = main ]] && func= || func=" $func"
  printf "Usage: ${0##*/}$func"
}

ylwf="\e[33m"
redf="\e[31m"
redb="\e[44m"
rst="\e[0m"

_param() {
  local out="$redb$ylwf $1 $rst"
  shift
  (( $# > 1 )) && out+=" $redf$1$rst" && shift
  out+=" $1"

  _log "$out"
}

ao() {
  if [[ $# != 2 ]]; then
    cat <<EOF
Converts audio-stream only (aac, 2ch, 44.1 kHz, vbr 3)
$(_usage) <input-filename> <output-filename>
EOF
    return 1
  fi

  ffmpeg -i "$1" -hide_banner -c:v copy -c:a libfdk_aac -ac 2 -ar 44100 -vbr 3 "$2"
}

player() {
  if (( ! $# )); then
    cat <<EOF
Convert tracks from list (aac, 2ch, 44.1 kHz, vbr 4)
$(_usage) <list>
EOF
    return 1
  fi

  while (( $# )); do
    [[ $(_mimetype "$1") = audio* ]] && LIST+="\n$1"
    shift
  done

  export -f player_1
  printf "$LIST" | parallel --will-cite player_1
  _log "\nTracks converted."
}

player_1() {
  [[ -z $1 ]] && return

  ffmpeg -i "$1" -hide_banner -v quiet -c:a libfdk_aac -ac 2 -ar 44100 -vbr 4 "${1%.*}.m4a"

  if [[ $? = 0 ]]; then
    [[ $1 != ${1%.*}.m4a ]] && rm "$1"
    printf .
  else
    printf e
  fi
}

photos() {
  if (( ! $# )); then
    cat <<EOF
Convert photos from list (jpeg, 1024x768)
$(_usage) <list>
EOF
    return 1
  fi

  while (( $# )); do
    if [[ $(_mimetype "$1") = image* ]]; then
      [[ -n $LIST ]] && LIST+="\n"
      LIST+="$1"
    fi
    shift
  done

  export -f _photo
  printf "$LIST" | parallel --will-cite _photo
  [[ $? = 0 ]] && _log "\nPhotos were successfully converted." \
               || _log "\nSomething nasty has happened."
}

_photo() {
  # TODO check imagemagick is installed
  local DIM=($(identify -format "%W %H" "$1" 2>/dev/null))
  local W=${DIM[0]:-0}
  local H=${DIM[1]:-0}

  if [[ $? != 0 || ($W -le 1024 && $H -le 1024) ]]; then
    printf _
    return
  fi

  convert "$1" -filter Lanczos -resize 1024x1024 -quality 80 -auto-level "$1"
  [[ $? = 0 ]] && printf . || printf e
}

covers() {
  if (( ! $# )); then
    cat <<EOF
Convert covers from list (jpeg, 900x900 or 600 for wide ones)
$(_usage) [-f] <list>
$(_param -f "creates 500x500 folder.jpg from cover")
EOF
    return 1
  fi

  [[ $1 = -f ]] && F="-f " && shift

  while (( $# )); do
    if [[ $(_mimetype "$1") = image* ]]; then
      [[ -n $LIST ]] && LIST+="\n"
      LIST+="$F$1"
    fi
    shift
  done

  export -f _cover
  printf -- "$LIST" | _parallel _cover
  (( ! $? )) && _log "\nCovers were successfully converted."
}

_cover() {
  Q=80

  [[ $1 = -f ]] && F=1 && shift

  local DIM=($(identify -format "%W %H" "$1" 2>/dev/null))
  [[ $? != 0 ]] && printf e && return 1

  local W=${DIM[0]:-0}
  local H=${DIM[1]:-0}

  local SIZE=$(_size_bytes "$1")
  [[ $? != 0 ]] && printf e && return 1

  if [[ $F = 1 && ${1%.*} = cover ]]; then
    if [[ $W -le 500 && $H -le 500 ]]; then
      cp "$1" folder.jpg
    else
      convert "$1" -filter Lanczos -resize 500x500 -quality $Q folder.jpg
    fi
  fi

  [[ $SIZE -le 131072 || ($W -le 900 && $H -le 900) ]] && printf _ && return

  local R=900x900
  if (( $(bc -l <<< "$W/$H > 1.4") )); then
    R=x600
  elif (( $(bc -l <<< "$H/$W > 1.4") )); then
    R=600
  fi

  convert "$1" -filter Lanczos -resize $R -quality $Q "${1%.*}.jpg"
  [[ $? = 0 ]] && printf . || printf e
}

fix() {
  if (( ! $# )); then
    cat <<EOF
Makes a naive attempt to fix media.
$(_usage) <file> [output]
EOF
    return 1
  fi

  local out=${2-${1%.*}-fixed.${1#*.}}
  ffmpeg -err_detect ignore_err -i $1 -c copy $out
}

videos() {
  if (( ! $# )); then
    cat <<EOF
Converts videos from list (mp4, 640x480, 1400 kbps)
$(_usage) <list>
EOF
    return 1
  fi

  while (( $# )); do
    if [[ $(_mimetype "$1") = video* ]]; then
      [[ -n $LIST ]] && LIST+="\n"
      LIST+="$1"
    fi
    shift
  done

  export -f _video
  printf "$LIST" | parallel --will-cite _video

  echo
  if [[ -s $ERR ]]; then
    _log "Not all videos were converted:"
    cat $ERR
  else
    _log "Videos converted successfully."
  fi

  rm -f $ERR
}

_video() {
  local BR_V=$(ffprobe -print_format csv=p=0 -v quiet -show_entries stream=bit_rate -select_streams v "$1")
  if (( $? )); then
    printf e
    _log "BR_V $1" >> "$ERR"
    shift
    return
  fi

  local A=$(ffprobe -print_format csv=p=0 -v quiet -show_entries stream=channels,bit_rate -select_streams a "$1")
  if (( $? )); then
    printf e
    _log "A $1" >> "$ERR"
    shift
    return
  fi

  A=(${A//,/ })
  (( $(bc <<< ${A[1]}/${A[0]}) < 60000 )) && A="-c:a copy" \
                                          || A="-c:a libfdk_aac -ar 44100 -vbr 3"

  (( $BR_V > 1400000 )) && BR_V=1400000

  ffmpeg -i "$1" -hide_banner -y -c:v mpeg4 -b:v $BR_V -vf 'scale=640:trunc(ow/a/2)*2' \
         -flags +aic+mv4 $A "_${1%.*}.mp4" >/dev/null

  if (( $? )); then
    printf e
    _log "CNV $1" >> "$ERR"
  else
    rm "$1"
    mv "_${1%.*}.mp4" "${1%.*}.mp4"
    printf .
  fi
}

film() {
  if (( ! $# )); then
    cat <<EOF
Convert film
$(_usage) [options] <input> [output.mkv]
$(_param "-f|--from" "    00:00:00.000" "Starting time for video encoding")
$(_param "-d|--duration" "00:00:00.000" "Total duration time for video encoding")

$(_param "-b|--bitrate" "000k" "Video encoding bitrate")
$(_param "-w|--width" "  000 " "Output video width (preserves aspect ratio)")

$(_param -cw "Rotate 90° clockwise")
$(_param -ccw "Rotate 90° counterclockwise")
$(_param -2 "Perform only 2nd pass encoding")
$(_param -sc "Copy subtitle stream")
$(_param --slow "Use \"slow\" x264 encoding preset (def. \"fast\")")
$(_param "-t|--threads" 2 "")
$(_param --log "quiet|panic|fatal|error|warning|info|verbose|debug|trace" "")

$(_param "-di|--deinterlace")
$(_param "-dn|--denoise" "luma_spatial:chroma_spatial:luma_tmp:chroma_tmp" \
"\nApply denoise filter.
Default values:
luma_spatial   = 4
chroma_spatial = 3
luma_tmp       = 6
chroma_tmp     = 4.5")

$(_param -eq "contrast:brightness:gamma" \
"\nApply eq flter.
Default values and possible ranges:
contrast   = 1 [-2.0 ..  2.0]
brightness = 0 [-1.0 ..  1.0]
gamma      = 1 [ 0.1 ..  10 ]")

$(_param "-cr|--crop" "width:height:x:y" \
"\nApply crop flter.
x,y - crop start position from top left corner")

$(_param -vf filters "Additional video filters to apply")
EOF
    return 1
  fi

  local preset=fast
  local threads=2

  while [[ $# > 1 ]]; do
  case "$1" in
  -f|--from)
    FROM="-ss $2"
    shift ;;
  -d|--duration)
    DUR="-t $2"
    shift ;;
  -b|--bitrate)
    BV="-b:v $2"
    shift ;;
  -vf)
    [ -n "$VF" ] && VF+=,
    VF+=$2
    shift ;;
  -w|--width)
    [ -n "$VF" ] && VF+=,
    VF+="scale=${2}:-1"
    shift ;;
  -dn|--denoise)
    [ -n "$VF" ] && VF+=,
    if [[ $2 =~ ^[0-9.:]+$ ]]; then
      IFS=: read -ra dn <<< "$2"
      shift
    fi
    VF+="hqdn3d=${dn[0]-4}:${dn[1]-3}:${dn[2]-6}:${dn[3]-4.5}" ;;
  -di|--deinterlace)
    [ -n "$VF" ] && VF+=,
    VF+=yadif ;;
  -cw)
    [ -n "$VF" ] && VF+=,
    VF+=transpose=1 ;;
  -ccw)
    [ -n "$VF" ] && VF+=,
    VF+=transpose=2 ;;
  -eq)
    [[ -n $VF ]] && VF+=,
    local eq
    IFS=: read -ra eq <<< "$2"
    VF+=eq=contrast=${eq[0]-1}:brightness=${eq[1]-0}:gamma=${eq[2]-1}
    shift ;;
  --slow)
    preset=slow ;;
  -2)
    p2only= ;;
  -cr|--crop)
    [[ -n $VF ]] && VF+=,
    VF+=crop=$2
    shift ;;
  -sc)
    scopy="-c:s copy" ;;
  -t|--threads)
    threads=$2
    shift ;;
  --log)
    LOG="-v $2"
    shift ;;
  *)
    (( $# > 2 )) && _log "Unknown argument '$1'!" && return 1
    [[ $# = 2 && $2 != *.mkv ]] && _log "Wrong output file '$2' must be *.mkv!" && return 1
    break ;;
  esac
  shift
  done

  [[ -n $VF ]] && VF="-vf $VF"

  local ARGS="\
    $FROM -i \"$1\" $DUR \
    -y -hide_banner \
    -c:v libx264 $BV -preset:v $preset -x264-params threads=$threads $VF \
    $scopy \
    -c:a libfdk_aac -ar 44100 -vbr 3 \
    $LOG"

  local out=${2:-${1%.*}-out.mkv}
  _log "< $1"

  [[ -z ${p2only+y} ]] && eval "ffmpeg $ARGS -pass 1 -f matroska /dev/null" || :
  (( ! $? ))           && eval "ffmpeg $ARGS ${p2only--pass 2} \"$out\""

  (( ! $? )) && _log "> $out"
}

webm() {
  if (( ! $# )); then
    cat <<EOF
Make webm out of video
$(_usage) [options] <input> [output.webm]
$(_param "-f|--from" "00:00:00.000" "    Starting time for video encoding")
$(_param "-d|--duration" "00:00:00.000" "Total duration time for video encoding")

$(_param "-b|--bitrate" "000k" "Video encoding bitrate")
$(_param "-w|--width" "000" "   Output video width (preserves aspect ratio)")

$(_param -2 "Perform only 2nd pass encoding")

$(_param -eq "contrast:brightness:gamma" "\nApply eq flter
contrast   = 1 [-2.0 ..  2.0]
brightness = 0 [-1.0 ..  1.0]
gamma      = 1 [ 0.1 ..  10 ]")
$(_param "-cr|--crop" "width:height:x:y" "\nApply crop flter
x,y - crop start position from top left corner")
$(_param "-dn|--denoise" "Apply denoise filter")
$(_param -vf "'filters'" "Additional video filters to apply")
EOF
    return 1
  fi

#    echo "$(_usage) [-w width] [-b bitrate] [-r frame-rate] \
#[-f from] [-d duration] [--stereo] [-vf video-filters] \
#[--preview image] <file>"

  local FROM
  local DUR
  local BV
  local R=24
  local AC=1
  local codec=libvpx-vp9
  local pr_i
  local pr_vf
  local pass2=0
  local IN
  local OUT

  while [[ $# > 1 ]]; do
  case "$1" in
  -f|--from)
    FROM="$2"
    shift ;;
  -d|--duration)
    DUR="-t $2"
    shift ;;
  -b|--bitrate)
    BV="-b:v $2"
    shift ;;
  -vf)
    [[ -n $VF ]] && VF+=,
    VF+=$2
    shift ;;
  -w|--width)
    [[ -n $VF ]] && VF+=,
    VF+="scale=${2}:-1"
    shift ;;
  -r|--rate)
    R=$2
    shift ;;
  --stereo)
    AC=2 ;;
  -pr|--preview)
    pr_i="-i $2"
    pr_vf="[0:v][1:v]overlay=0:0:enable="
    shift ;;
  -2)
    pass2=1 ;;
  *)
    (( $# > 2 )) && _log "Unknown argument '$1'!" && return 1
    [[ $# = 2 && $2 != *.webm ]] && _log "Wrong output file '$2' must be *.webm!" && return 1
    IN=$1
    OUT=$2
    ;;
  esac
  shift
  done

  if [[ -n $VF$pr_vf ]]; then
    if [[ -n $pr_vf ]]; then
      pr_vf+="'"
      [[ -n $FROM ]] && pr_vf+="lte(t,$FROM+0.01)" \
                     || pr_vf+="lte(n,1)"
      pr_vf+="'"
    fi
    [[ -n $VF && -n $pr_vf ]] && VF=,$VF
    VF="$pr_vf$VF"
  fi

  FROM=${FROM:+-ss $FROM}
  ARGS="-y -hide_banner -i $IN $pr_i \
        -c:v $codec -r $R $BV -crf 4 \
        -tile-columns 3 -threads 8 \
        -speed 0 -g 9999 -frame-parallel 0 -pix_fmt +yuv420p -sn \
        -c:a libopus -b:a 64k -ac $AC"

  (( ! $pass2 )) && ffmpeg $ARGS ${VF:+-filter_complex $VF} -pass 1 -f webm $FROM $DUR /dev/null || :
  (( ! $? ))     && ffmpeg $ARGS ${VF:+-filter_complex $VF} -pass 2 $FROM $DUR ${OUT:-${IN%.*}-out.webm}

  (( ! $? )) && echo "Video converted!"
}

gif() {
  if (( ! $# )); then
    cat <<EOF
Convert video to GIF
$(_usage) [options] <input> [output.gif]
$(_param "-f|--from" "    00:00:00.000" "Starting time for video encoding")
$(_param "-d|--duration" "00:00:00.000" "Total duration time for video encoding")

$(_param "-w|--width" "  000 " "Output video width (preserves aspect ratio)")

$(_param -2 "Perform only 2nd pass encoding")
$(_param --diff "Use \"stats_mode=diff\", which favors moving (def. \"full\")")
$(_param --dithering "none|bayer:bayer_scale=N|floyd_steinberg|sierra2|sierra2_4a" "(def. \"floyd_steinberg\")")
$(_param --fps 15 "")
$(_param --log "quiet|panic|fatal|error|warning|info|verbose|debug|trace" "")

$(_param "-di|--deinterlace")
$(_param "-dn|--denoise" "luma_spatial:chroma_spatial:luma_tmp:chroma_tmp" \
"\nApply denoise filter.
Default values:
luma_spatial   = 4
chroma_spatial = 3
luma_tmp       = 6
chroma_tmp     = 4.5")

$(_param -eq "contrast:brightness:gamma" \
"\nApply eq flter.
Default values and possible ranges:
contrast   = 1 [-2.0 ..  2.0]
brightness = 0 [-1.0 ..  1.0]
gamma      = 1 [ 0.1 ..  10 ]")

$(_param "-cr|--crop" "width:height:x:y" \
"\nApply crop flter.
x,y - crop start position from top left corner")

$(_param -vf filters "Additional video filters to apply")
EOF
    return 1
  fi

  local pass2=0
  local smode=full
  local dith=floyd_steinberg
  local fps=5
  local colors=32

  while [[ $# > 1 ]]; do
  case "$1" in
  -f|--from)
    FROM="-ss $2"
    shift ;;
  -d|--duration)
    DUR="-t $2"
    shift ;;
  -vf)
    [ -n "$VF" ] && VF+=,
    VF+=$2
    shift ;;
  -w|--width)
    [ -n "$VF" ] && VF+=,
    VF+="scale=${2}:-1:flags=lanczos"
    shift ;;
  -dn|--denoise)
    [ -n "$VF" ] && VF+=,
    if [[ $2 =~ ^[0-9.:]+$ ]]; then
      IFS=: read -ra dn <<< "$2"
      shift
    fi
    VF+="hqdn3d=${dn[0]-4}:${dn[1]-3}:${dn[2]-6}:${dn[3]-4.5}" ;;
  -eq)
    [[ -n $VF ]] && VF+=,
    local eq
    IFS=: read -ra eq <<< "$2"
    VF+=eq=contrast=${eq[0]-1}:brightness=${eq[1]-0}:gamma=${eq[2]-1}
    shift ;;
  --diff)
    smode=diff ;;
  --dithering)
    dith=$2
    shift ;;
  --fps)
    fps=$2
    shift ;;
  -c|--colors)
    colors=$2
    shift ;;
  -2)
    pass2=1 ;;
  -cr|--crop)
    [[ -n $VF ]] && VF+=,
    VF+=crop=$2
    shift ;;
  --log)
    LOG="-v $2"
    shift ;;
  *)
    (( $# > 2 )) && _log "Unknown argument '$1'!" && return 1
    [[ $# = 2 && $2 != *.gif ]] && _log "Wrong output file '$2' must be *.gif!" && return 1
    break ;;
  esac
  shift
  done

  [ -n "$VF" ] && VF+=,
  VF+="fps=$fps"

  local ARGS="$FROM $DUR -y -hide_banner $LOG"

  local out=${2:-${1%.*}-out.gif}
  local palette="/tmp/palette-${out%.*}.png"
  local VF1="$VF,palettegen=stats_mode=$smode:max_colors=$colors"
  local VF2="$VF [x]; [x][1:v] paletteuse=dither=$dith"

  _log "< $1"

  (( ! $pass2 ))       && ffmpeg $ARGS -i "$1" -vf "$VF1" "$palette"
  (( ! $? || $pass2 )) && ffmpeg $ARGS -i "$1" -i $palette -lavfi "$VF2" "$out"

  (( ! $? )) && _log "> $out"
}

if (( ! $# )); then
  cat <<EOF
Universal media convertor
$(_usage) <ao|photos|covers|videos|player|film|webm>
EOF
else
  CMD="$1"
  shift
  $CMD "$@"
fi
