#!/usr/bin/env python3

# pip3 install jira jsonpath-rw

import os
from jira import JIRA, JIRAError
import argparse
import re
from jsonpath_rw import parse as json_parse
import sys

def init_jira():
  jira_user = os.environ['JIRA_USER']
  jira_pass = os.environ['JIRA_PASS']
  jira_proj = os.environ['JIRA_DEF_PROJECT']
  jira_url  = os.environ['JIRA_URL']

  j = JIRA(jira_url, basic_auth=(jira_user, jira_pass))
  j.def_project = jira_proj

  return j

p = argparse.ArgumentParser(description="Utility for working with JIRA")
sp = p.add_subparsers(dest='command')

show_sp = sp.add_parser('show')
show_sp.add_argument('tickets', nargs='*')
show_sp.add_argument('-f', '--format')

work_sp = sp.add_parser('work')
work_sp.add_argument('ticket')
work_sp.add_argument('time', nargs='?', default='1h')
work_sp.add_argument('-c', '--comment', default='work')

sp.add_parser('list')

args = p.parse_args()
cmd = args.command
jira = init_jira() if cmd else None

fields_re = re.compile('%([a-zA-Z_0-9]+)|%{ ?([a-zA-Z_0-9.]+) ?}')

def show(ticket, format):
  format = format or '%id %summary\n\n%description'

  def parse_format(format):
    fields = [f.group(1) or f.group(2) for f in fields_re.finditer(format)]
    fieldsFilter = [f.split('.', 1)[0] for f in fields]
    return (fieldsFilter, fields)

  try:
    (fieldsFilter, fields) = parse_format(format)
    issue = jira.issue(ticket, fields=fieldsFilter)
    fs = issue.raw['fields']
    result = format
    for f in fields:
      value = str(issue) if f == 'id' else None
      if not value:
        list = json_parse('fields.' + f).find(issue.raw)
        value = (list and list[0].value) or "NULL"
      result = fields_re.sub(value, result, count=1)
    print(result)
  except JIRAError as e:
    print(e.text)

def work(ticket, time='1h', comment='work'):

  def worklog_to_update(w):
    from datetime import datetime
    from dateutil.parser import parse as parse_date
    return (parse_date(w.started).date() == datetime.today().date() and
      w.comment == comment)

  ws = list(filter(worklog_to_update, jira.worklogs(ticket)))
  w = ws and ws[0] or None

  def t(str):
    return int(str.strip('h'))

  if w:
    t_old = t(w.timeSpent)
    t_add = t(time)
    t_new = str(t_old + t_add) + 'h'
    w.update(timeSpent=t_new)
    print('Worklog updated!')
  else:
    jira.add_worklog(ticket, timeSpent=time, comment=comment)
    print('New worklog added!')

  # TODO show working time left in a day
  # https://<JIRA_URL>/rest/api/latest/search?jql=worklogDate=%272019-01-31%27%20AND%20worklogAuthor=%27<JIRA_USER>%27&fields=worklog

if cmd == 'show':
  # TODO check ticket value and apply `jira.def_project` if necessary
  ts = args.tickets or map(lambda l: l.rstrip(), sys.stdin)
  for t in ts:
    show(t, args.format)
elif cmd == 'work':
  work(args.ticket, args.time, args.comment)
elif cmd == 'list':
  print(args)
else:
  p.print_help()

# TODO
#
# jira show TICKET
# jira list
