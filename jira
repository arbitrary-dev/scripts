#!/usr/bin/env python3

# pip3 install jira jsonpath-rw

import os
from jira import JIRA, JIRAError
import argparse
import re
from jsonpath_rw import parse as json_parse

def init_jira():
  jira_user = os.environ['JIRA_USER']
  jira_pass = os.environ['JIRA_PASS']
  jira_proj = os.environ['JIRA_DEF_PROJECT']
  jira_url  = os.environ['JIRA_URL']

  j = JIRA(jira_url, basic_auth=(jira_user, jira_pass))
  j.def_project = jira_proj

  return j

p = argparse.ArgumentParser(description="Utility for working with JIRA")
sp = p.add_subparsers(dest='command')

show_sp = sp.add_parser('show')
# TODO support for stdin list of tickets
show_sp.add_argument('ticket')
show_sp.add_argument('-f', '--format')

work_sp = sp.add_parser('work')
work_sp.add_argument('time', nargs='?', default='1h')
work_sp.add_argument('-c', '--comment', default='work')

sp.add_parser('list')

args = p.parse_args()
cmd = args.command
jira = init_jira() if cmd else None

fields_re = re.compile('%([a-zA-Z_0-9]+)|%{ ?([a-zA-Z_0-9.]+) ?}')

def parse_format(format):
  fields = [f.group(1) or f.group(2) for f in fields_re.finditer(format)]
  fieldsFilter = [f.split('.', 1)[0] for f in fields]
  return (fieldsFilter, fields)

def show(ticket, format):
  try:
    (fieldsFilter, fields) = parse_format(format)
    issue = jira.issue(ticket, fields=fieldsFilter)
    fs = issue.raw['fields']
    result = format
    for f in fields:
      value = str(issue) if f == 'id' else None
      if not value:
        list = json_parse('fields.' + f).find(issue.raw)
        value = (list and list[0].value) or "NULL"
      result = fields_re.sub(value, result, count=1)
    print(result)
  except JIRAError as e:
    print(e.text)

if cmd == 'show':
  # TODO check ticket value and apply `jira.def_project` if necessary
  show(args.ticket, args.format)
elif cmd == 'work':
  print(args)
elif cmd == 'list':
  print(args)
else:
  p.print_help()

# TODO
#
# jira show TICKET
# jira work
# jira list
