#!/usr/bin/env python3

# Setup:
#
# pip3 install mutagen

from os import listdir, getcwd
from os.path import isfile, basename, splitext

from mutagen import File
from mutagen.mp3 import MP3
from mutagen.mp4 import MP4
from mutagen.flac import FLAC

import pandas as pd
from functools import partial
import re
import readline
import sys
from shutil import get_terminal_size

from prompt_toolkit import PromptSession, prompt
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.auto_suggest import AutoSuggest, Suggestion
from prompt_toolkit.shortcuts import clear

f_num          = 'num'
f_artist       = 'artist'
f_title        = 'title'
f_album_artist = 'album_artist'
f_album        = 'album'
f_year         = 'year'
f_comment      = 'comment'
f_filename     = 'filename'
f_genre        = 'genre'
f_disc         = 'disc'

f_file = 'file'

dataCols = [ f_num         , f_artist , f_title , f_album_artist , f_album , f_year , f_comment     , f_genre , f_disc       , f_filename ]
dataExtr = {
  MP3:     [ 'TRCK'        , 'TPE1'   , 'TIT2'  , 'TPE2'         , 'TALB'  , 'TDRC' , 'COMM'        , 'TCON'  , 'TPOS'       ],
  MP4:     [ 'trkn'        , '©art'   , '©nam'  , 'aART'         , '©alb'  , '©day' , '©cmt'        , '©gen'  , 'disk'       ],
  FLAC:    [ 'TRACKNUMBER' , 'ARTIST' , 'TITLE' , 'ALBUMARTIST'  , 'ALBUM' , 'DATE' , 'DESCRIPTION' , 'GENRE' , 'DISCNUMBER' ]
}

cmd_print  = "print"
cmd_tags   = "tags"
cmd_remove = "remove"
cmd_edit   = "edit"
cmd_write  = "write"
cmd_quit   = "quit"

cmds = [cmd_print, cmd_tags, cmd_remove, cmd_edit, cmd_write, cmd_quit]
class CommandSuggest(AutoSuggest):
  def get_suggestion(this, buffer, document):
    if document.find_backwards(cmd_remove):
      return Suggestion('0 1-3 4,5 album_artist comment')
cmdsCompleter = WordCompleter(cmds)
cmdsSuggest = CommandSuggest()
s = PromptSession(completer=cmdsCompleter, auto_suggest=cmdsSuggest)

def filename(filepath):
  return splitext(basename(filepath))[0]

def get_raw(file, col):
  tpe = type(file)
  key = dataExtr[tpe][dataCols.index(col)]
  val = file.get(key)
  if not val and tpe == MP3 and col == f_comment:
    val = file.tags.getall(key)
    val = val[0].text[0] if val and val[0].text else None
  elif val and tpe == MP4 and isinstance(val, list):
    val = val[0]
  return str(val).strip() if val else None

def artist_title(s):
  s = s.replace('_', ' ') if s and s.count('_') and s.count('-') and not s.count(' ') else s
  arr = s.split(" - ") if s else None
  return arr if arr and len(arr) == 2 else (None, None)

def post_process(val, col, file, filepath):
  if col == f_comment:
    # Skip first 2 lines
    #val = '\n'.join(val.splitlines()[2:])
    None
  elif col == f_artist:
    arr = [
      lambda: val,
      lambda: artist_title(get_raw(file, f_title))[0],
      lambda: artist_title(filename(filepath))[0]
    ]
    val = next(filter(None, map(lambda x: x(), arr)))
  elif col == f_title:
    # TODO Apply the Title Case
    val = val if val else artist_title(filename(filepath))[1]
    if val:
      # Remove artist
      val = val.split(" - ")[-1]
      val = val.replace('-', ' ')
      # Lower case helper words
      arr = val.split(' ')
      lower = ['a', 'an', 'and', 'by', 'for', 'of', 'or', 'the']
      val = ' '.join([arr[0]] + [i.lower() if i.lower() in lower else i for i in arr[1:]])
  elif col == f_album and val:
    # Remove date
    val = re.sub(r"\(?(\d{4}-..-..|\d{4})\)?", "", val)
  elif col == f_num and val:
    val = re.sub(r"(\d+)/?.*", r"\1", val)
    val = int(val) if val else None
  elif col == f_year and val:
    val = re.sub(r".*(\d{4}).*", r"\1", val)
    val = int(val) if val else None
  return val

def get(filepath, file, col):
  if col == f_filename:
    return filename(filepath)
  try:
    val = get_raw(file, col)
    val = post_process(val, col, file, filepath)
    return val
  except:
    print("Error while processing tag '%s' for %s: %s" % (col, filepath, sys.exc_info()[1]))

def input_with_prefill(prompt, text):
  def hook():
    readline.insert_text(text)
    readline.redisplay()
  readline.set_pre_input_hook(hook)
  result = input(prompt)
  readline.set_pre_input_hook()
  return result

def num(file):
  """Track number"""
  n = get(file, f_num)
  return int(n) if n else None

def art(file):
  """Song artist"""
  return get(file, f_artist)

def tit(file):
  """Song title"""
  return get(file, f_title)

def aar(files):
  """Album artist"""
  if files:
    file = files[0]
    # TODO infer album artist when not available
    return get(file, f_album_artist)

def alb(files):
  """Album title"""
  if files:
    file = files[0]
    # TODO infer album title from directory name
    return get(file, f_album)

def yer(files):
  """Album year"""
  if files:
    file = files[0]
    year = get(file, f_year)
    return int(year) if year else None

def remove(what, df):
  what = [w for token in what for w in token.split(',')]
  idxs = []
  cols = []
  for token in what:
    if token.isdigit():
      idxs.append(int(token))
    elif '-' in token:
      t = token.split('-')
      idxs += range(int(t[0]), int(t[1]) + 1)
    else:
      cols.append(token)
  df.drop(index=idxs, columns=cols, inplace=True)

def edit(df, idx, col):
  if idx == None:
    if col == f_filename:
      val = prompt("New template for 'filename': ")
      # TODO %01d for nums of total <10
      df[f_filename] = df.apply(lambda r: val.replace('%n', '%02d' % (r[f_num])).replace('%a', r[f_artist]).replace('%t', r[f_title]), axis=1)
    else:
      val = prompt("New values for '%s': " % (col), default=df[col].mode()[0])
      df[col] = val
  else:
    val = prompt("New value for '%s': " % (col), default=df.loc[idx, col])
    df.loc[idx, col] = val

fs = list(filter(isfile, listdir()))
if not fs:
  print("Nothing interesting at", getcwd())
else:
  #print("%s - %s (%d)\n" % (aar(fs), alb(fs), yer(fs)))
  #for f in sorted(fs, key=num):
  #  print("[%s] %02d %s - %s" % (type(f).__name__, num(f), art(f), tit(f)))

  def row(filepath):
    file = File(filepath)
    if file and type(file) in [MP3, MP4, FLAC]:
      print("Loading:", filepath)
    else:
      print("Skipped:", filepath)
      return None
    extr = partial(get, filepath, file)
    return list(map(extr, dataCols)) + [filepath]

  df = pd.DataFrame(
    data = filter(None, map(row, fs)),
    columns = dataCols + [f_file]
  ).astype({
    f_num:  'Int32',
    f_year: 'Int32'
  })
  df.sort_values(f_num, inplace=True)
  df.reset_index(drop=True, inplace=True)

  pd.set_option('display.max_columns', None)
  pd.set_option('display.width', get_terminal_size().columns)
  pd.set_option('display.max_colwidth', 32)

  #print("\nAlbum artist candidates:")
  #artists = df[f_artist].value_counts(normalize=True) * 100
  #print(artists.map(int).map("{}%".format))

  #album_artist = input_with_prefill("Which one? ", artists.idxmax())
  #print("%s!" % album_artist)

  def printData():
    print()
    print(df[df.columns.drop('file')])

  printData()

  # TODO save

  def handle(cmd):
    if cmd == cmd_quit:
      sys.exit(0)
    if cmd.startswith(cmd_remove):
      what = cmd.split(' ')[1:]
      remove(what, df)
    elif cmd.startswith(cmd_edit):
      idx = None
      col = None
      for i in cmd.split(' ')[1:]:
        if i.isdigit():
          idx = int(i)
        elif i in df.columns.drop('file'):
          col = i
      edit(df, idx, col)
    elif cmd == cmd_print:
      printData()
    elif cmd.startswith(cmd_tags):
      idx = int(cmd.split(' ')[1])
      tags = File(df.at[idx, f_file]).pprint()
      print(tags)
    elif cmd:
      print()
      cmd = s.prompt("%s what? " % cmd)
      handle(cmd)

  while True:
    try:
      clear()
      printData()
      print()
      cmd = s.prompt("What's next? ")
      handle(cmd)
    except (EOFError, KeyboardInterrupt):
      sys.exit(1)

# vim: et sw=2 ts=2 sts=2
