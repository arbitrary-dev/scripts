#!/usr/bin/env python3

# Setup:
#
# pip install mutagen
# pip install pandas
# pip install prompt_toolkit

from os import listdir, getcwd, rename
from os.path import isfile, basename, dirname, splitext

from mutagen import File, Metadata
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, ID3TimeStamp
from mutagen.mp4 import MP4, MP4Tags
from mutagen.flac import FLAC
from mutagen._vorbis import VCommentDict

import pandas as pd
from functools import partial
import re
import sys
from shutil import get_terminal_size
from importlib import import_module

from prompt_toolkit import PromptSession, prompt
from prompt_toolkit.completion import WordCompleter
from prompt_toolkit.auto_suggest import AutoSuggest, Suggestion
from prompt_toolkit.shortcuts import clear

f_num          = 'num'
f_artist       = 'artist'
f_title        = 'title'
f_album_artist = 'album_artist'
f_album        = 'album'
f_year         = 'year'
f_comment      = 'comment'
f_genre        = 'genre'
f_disc         = 'disc'

f_filename = 'filename'
f_file     = 'file'
f_changed  = 'changed'

dataCols = [ f_num         , f_artist , f_title , f_album_artist , f_album , f_year , f_comment     , f_genre , f_disc       ]
dataExtr = {
  MP3:     [ 'TRCK'        , 'TPE1'   , 'TIT2'  , 'TPE2'         , 'TALB'  , 'TDRC' , 'COMM'        , 'TCON'  , 'TPOS'       ],
  MP4:     [ 'trkn'        , '©art'   , '©nam'  , 'aART'         , '©alb'  , '©day' , '©cmt'        , '©gen'  , 'disk'       ],
  FLAC:    [ 'TRACKNUMBER' , 'ARTIST' , 'TITLE' , 'ALBUMARTIST'  , 'ALBUM' , 'DATE' , 'DESCRIPTION' , 'GENRE' , 'DISCNUMBER' ]
}

cmd_print  = "print"
cmd_tags   = "tags"
cmd_remove = "remove"
cmd_edit   = "edit"
cmd_write  = "write"
cmd_quit   = "quit"

cmds = [cmd_print, cmd_tags, cmd_remove, cmd_edit, cmd_write, cmd_quit]

# TODO suggest column names on edit/remove
class CommandSuggest(AutoSuggest):
  def get_suggestion(self, buffer, document):
    if document.find_backwards(cmd_remove):
      return Suggestion('0 1-3 4,5 album_artist comment')
# TODO complete column names after edit/remove
cmdsCompleter = WordCompleter(cmds)
cmdsSuggest = CommandSuggest()
s = PromptSession(completer=cmdsCompleter, auto_suggest=cmdsSuggest)

def write(df):
  cols = data_columns(df)

  def writeOne(row):
    filepath = row[f_file]
    ext = splitext(filepath)[1].lower()
    f = File(filepath)
    print("\nBEFORE:\n" + f.pprint())
    ft = type(f)
    tags = None
    if ft == MP3:
      tags = ID3()
    elif ft == MP4:
      # TODO check MP4
      tags = MP4Tags()
    elif ft == FLAC:
      # TODO check FLAC
      tags = VCommentDict()
    de = dataExtr[ft]

    def set_tag(tag, val):
      if ft == MP3:
        Tag = getattr(import_module("mutagen.id3"), tag)
        if c == f_year:
          val = [ID3TimeStamp(str(val))]
        else:
          val = [val]
        tags.setall(tag, [Tag(3, text=val)])
      else:
        tags[tag] = val

    abort = False
    for c in cols:
      tag = de[dataCols.index(c)]
      val = row[c]
      if not val:
        continue
      try:
        set_tag(tag, val)
      except:
        print("Error while setting tag '%s' to '%s': %s" % (tag, val, sys.exc_info()[1]))
        abort = True

    if not abort:
      f.tags = tags
      print("\nAFTER:\n" + f.pprint())
      f.save()

      fname = row[f_filename]
      if filename(filepath) != fname:
        d = dirname(filepath)
        d = (d + '/') if d else ""
        new_filepath = d + fname + ext
        rename(filepath, new_filepath)
        print("\nRENAMED: %s -> %s" % (filepath, new_filepath))

  for _, row in df[df.changed].iterrows():
    writeOne(row)

  print("\nDone!")

def filename(filepath):
  return splitext(basename(filepath))[0]

def get_raw(file, col):
  tpe = type(file)
  key = dataExtr[tpe][dataCols.index(col)]
  val = file.get(key)
  if not val and tpe == MP3 and col == f_comment:
    val = file.tags.getall(key)
    val = val[0].text[0] if val and val[0].text else None
  elif val and tpe == MP4 and isinstance(val, list):
    val = val[0]
  return str(val).strip() if val else None

def artist_title(s):
  s = s.replace('_', ' ') if s and s.count('_') and s.count('-') and not s.count(' ') else s
  arr = s.split(" - ") if s else None
  return arr if arr and len(arr) == 2 else (None, None)

def post_process(val, col, file, filepath):
  if col == f_comment:
    # Skip first 2 lines
    #val = '\n'.join(val.splitlines()[2:])
    None
  elif col == f_artist:
    arr = [
      lambda: val,
      lambda: artist_title(get_raw(file, f_title))[0],
      lambda: artist_title(filename(filepath))[0]
    ]
    val = next(filter(None, map(lambda x: x(), arr)))
  elif col == f_title:
    val = val if val else artist_title(filename(filepath))[1]
    if val:
      # Remove artist
      val = val.split(" - ")[-1]
      val = val.replace('-', ' ')
      # TODO Apply the Title Case
      # Lower case helper words
      arr = val.split(' ')
      lower = ['a', 'an', 'and', 'by', 'for', 'of', 'or', 'the']
      val = ' '.join([arr[0]] + [i.lower() if i.lower() in lower else i for i in arr[1:]])
  elif col == f_album and val:
    # Remove date
    val = re.sub(r"\(?(\d{4}-..-..|\d{4})\)?", "", val)
  elif col == f_num and val:
    val = re.sub(r"(\d+)/?.*", r"\1", val)
    val = int(val) if val else None
  elif col == f_year and val:
    val = re.sub(r".*(\d{4}).*", r"\1", val)
    val = int(val) if val else None
  return val

def get(filepath, file, col):
  try:
    val = get_raw(file, col)
    val = post_process(val, col, file, filepath)
    return val
  except:
    print("Error while processing tag '%s' for %s: %s" % (col, filepath, sys.exc_info()[1]))

def remove(what, df):
  what = [w for token in what for w in token.split(',')]
  idxs = []
  cols = []
  for token in what:
    if token.isdigit():
      idxs.append(int(token))
    elif '-' in token:
      t = token.split('-')
      idxs += range(int(t[0]), int(t[1]) + 1)
    else:
      cols.append(token)
  df.drop(index=idxs, columns=cols, inplace=True)

def edit(df, idx, col):
  if idx == None:
    if col == f_filename:
      val = prompt("New template for 'filename': ")
      # TODO %01d for nums of total <10
      df[f_filename] = df.apply(lambda r: val.replace('%n', '%02d' % (r[f_num])).replace('%a', r[f_artist]).replace('%t', r[f_title]), axis=1)
      df[f_changed] = True
    else:
      val = prompt("New values for '%s': " % (col), default=df[col].mode()[0])
      df[col] = val
      df[f_changed] = True
  else:
    val = prompt("New value for '%s': " % (col), default=df.loc[idx, col])
    df.loc[idx, col] = val
    df.loc[idx, f_changed] = True

def data_columns(df, plus=[]):
  return df.columns.intersection(dataCols + plus)

fs = list(filter(isfile, listdir()))
if not fs:
  print("Nothing interesting at", getcwd())
else:
  def row(filepath):
    file = File(filepath)
    tpe = type(file)
    if file and tpe in [MP3, MP4, FLAC]:
      print("Loading %s: %s" % (tpe.__name__, filepath))
    else:
      print("Skipped %s: %s" % (tpe.__name__, filepath))
      return None
    extr = partial(get, filepath, file)
    return list(map(extr, dataCols)) + [filename(filepath), filepath, False]

  df = pd.DataFrame(
    data = filter(None, map(row, fs)),
    columns = dataCols + [f_filename, f_file, f_changed]
  ).astype({
    f_num:  'Int32',
    f_year: 'Int32'
  })
  df.sort_values(f_num, inplace=True)
  df.reset_index(drop=True, inplace=True)

  pd.set_option('display.max_columns', None)
  pd.set_option('display.width', get_terminal_size().columns)
  pd.set_option('display.max_colwidth', 32)

  def printData(what=[]):
    cols = None

    if "all" in what:
      cols = data_columns(df, plus=[f_filename, f_file, f_changed])
    else:
      cols = data_columns(df, plus=[f_filename])

    print()
    if f_changed in what:
      print(df.loc[df[f_changed], cols])
    else:
      print(df[cols])

  printData()

  def handle(cmd):
    if cmd == cmd_quit:
      sys.exit(0)
    if cmd.startswith(cmd_remove):
      what = cmd.split(' ')[1:]
      remove(what, df)

      clear()
      printData()
    elif cmd.startswith(cmd_edit):
      idx = None
      col = None
      for i in cmd.split(' ')[1:]:
        if i.isdigit():
          idx = int(i)
        elif i in data_columns(df, plus=[f_filename]):
          col = i
      edit(df, idx, col)

      clear()
      printData()
    elif cmd.startswith(cmd_print):
      what = cmd.split(' ')[1:]
      clear()
      printData(what)
    elif cmd.startswith(cmd_tags):
      idx = int(cmd.split(' ')[1])
      tags = File(df.at[idx, f_file]).pprint()
      print(tags)
    elif cmd == cmd_write:
      write(df)
    elif cmd:
      print()
      cmd = s.prompt("%s what? " % cmd)
      handle(cmd)

  while True:
    try:
      print()
      cmd = s.prompt("What's next? ")
      handle(cmd)
    except (EOFError, KeyboardInterrupt):
      sys.exit(1)

# vim: et sw=2 ts=2 sts=2
